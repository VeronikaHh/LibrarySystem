name: CI Workflow

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        options: >-
          --health-cmd="pg_isready -U testuser -d testdb"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
        ports:
          - 5433:5432

    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.13

      # Step 3: Install dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 4: Run Linting
      - name: Run Linter (ruff)
        run: |
          pip install ruff
          ruff check

      # Step 5: Run Tests
      - name: Run Tests
        env:
          DATABASE_URL: postgres://testuser:testpassword@localhost:5433/testdb
        run: |
          pip install pytest pytest-asyncio httpx
          pytest

      # Step 6: Build Application
      - name: Build Application
        run: |
          uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          sleep 5  # Wait for the server to start
          curl -f http://127.0.0.1:8000/docs || exit 1  # Check the server health
          pkill -f uvicorn  # Stop the server

      # Step 7: Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      # Step 8: Add env file from github secret
      - name: Create env file
        run: |
          echo "${{ secrets.ENV_FILE }}" > .env.deploy
          
      # Step 9: Build Application with docker-compose
      - name: Build docker-compose
        run: |
          docker-compose up --build -d  # Run containers in detached mode
          sleep 5  # Give some time for containers to start
          docker-compose ps  # Check the status of containers
          curl -f http://127.0.0.1:8000/docs || exit 1  # Verify application is reachable
          docker-compose down  # Stop and clean up containers
